<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SignalRSwaggerGen</name>
    </assembly>
    <members>
        <member name="T:SignalRSwaggerGen.Attributes.SignalRHiddenAttribute">
            <summary>
            Use this attribute to disable Swagger documentation for specific components
            </summary>
        </member>
        <member name="T:SignalRSwaggerGen.Attributes.SignalRHubAttribute">
            <summary>
            Use this attribute to enable Swagger documentation for hubs
            </summary>
        </member>
        <member name="M:SignalRSwaggerGen.Attributes.SignalRHubAttribute.#ctor(System.String,SignalRSwaggerGen.Enums.AutoDiscover,System.String[],System.Type,System.String,System.Boolean,System.Boolean,System.String)">
            <param name="path">Path of the hub. If path contains "[Hub]", this part will be replaced with the name of the type holding this attribute(hub name).
            If not specified, the func from <see cref="T:SignalRSwaggerGen.SignalRSwaggerGenOptions"/> will be used to get the path.</param>
            <param name="autoDiscover">A flag indicating what components will have Swagger documentation enabled automatically.
            If <see cref="F:SignalRSwaggerGen.Enums.AutoDiscover.Inherit"/> specified, the value from <see cref="T:SignalRSwaggerGen.SignalRSwaggerGenOptions"/> will be used.</param>
            <param name="documentNames">An array of names of the Swagger documents the hub will be displayed in.
            If null specified, then the value from <see cref="T:SignalRSwaggerGen.SignalRSwaggerGenOptions"/> will be used. If empty array specified, then the hub will be displayed in all documents.</param>
            <param name="nameTransformerType">The type of the name transformer. The type must inherit from <see cref="T:SignalRSwaggerGen.Naming.NameTransformer"/> class, be non-abstract and have public parameterless constructor.
            The name transformer will be used to transform the name of the hub and its methods. If null specified, the transformer from <see cref="T:SignalRSwaggerGen.SignalRSwaggerGenOptions"/> will be used.
            The namespace <see cref="!:SignalRSwaggerGen.Naming"/> already contains some predefined name transformers, so check 'em out.</param>
            <param name="tag">The tag under which the hub will be placed in Swagger doc. If null specified, the summary section of the XML comments of the hub will be used.
            If XML comments missing or not enabled, the name of the type holding this attribute will be used.</param>
            <param name="xmlCommentsDisabled">A flag indicating if XML comments are disabled for the hub</param>
            <param name="deprecated">A flag which indicates if the decorated hub will be marked as deprecated in Swagger document</param>
            <param name="description">The text that will appear in description section of decorated hub in Swagger document</param>
            <exception cref="T:System.ArgumentException">Thrown if
            - <paramref name="autoDiscover"/> value not allowed for this attribute
            - <paramref name="nameTransformerType"/> is abstract or does not inherit from <see cref="T:SignalRSwaggerGen.Naming.NameTransformer"/> class or has no public parameterless constructor</exception>
        </member>
        <member name="T:SignalRSwaggerGen.Attributes.SignalRMethodAttribute">
            <summary>
            Use this attribute to enable Swagger documentation for hub methods
            </summary>
        </member>
        <member name="M:SignalRSwaggerGen.Attributes.SignalRMethodAttribute.#ctor(System.String,SignalRSwaggerGen.Enums.Operation,SignalRSwaggerGen.Enums.AutoDiscover,System.String,System.String,System.String,System.Boolean)">
            <param name="name">Name of the method.
            If the name contains "[Method]", this part will be replaced with the name of the method holding this attribute.</param>
            <param name="operation">Same as HTTP verb. If <see cref="F:SignalRSwaggerGen.Enums.Operation.Inherit"/> specified, then the value from <see cref="T:SignalRSwaggerGen.SignalRSwaggerGenOptions"/> will be used.</param>
            <param name="autoDiscover">A flag indicating what components will have Swagger documentation enabled automatically.
            If <see cref="F:SignalRSwaggerGen.Enums.AutoDiscover.Inherit"/> specified, the value from the hub will be used. If the hub also has this value specified, then the value from <see cref="T:SignalRSwaggerGen.SignalRSwaggerGenOptions"/> will be used.</param>
            <param name="summary">The text that will appear in summary section of the decorated method in Swagger document.
            If null specified and XML comments not disabled, the summary section of the XML comments of the method will be used.</param>
            <param name="description">The text that will appear in description section of decorated method in Swagger document</param>
            <param name="tag">The tag under which the method will be placed in Swagger doc. If null specified, the tag of the hub will be used.</param>
            <param name="deprecated">A flag which indicates if the decorated method will be marked as deprecated in Swagger document</param>
            <exception cref="T:System.ArgumentException">Thrown if
            - <paramref name="name"/> is null or empty
            - <paramref name="autoDiscover"/> value not allowed for this attribute</exception>
        </member>
        <member name="T:SignalRSwaggerGen.Attributes.SignalRParamAttribute">
            <summary>
            Use this attribute to enable Swagger documentation for method params
            </summary>
        </member>
        <member name="M:SignalRSwaggerGen.Attributes.SignalRParamAttribute.#ctor(System.String,System.Type,System.Boolean)">
            <param name="description">The text that will appear in description section of decorated parameter in Swagger document</param>
            <param name="paramType">Parameter type. If null specified, the type of the parameter holding this attribute will be picked up.</param>
            <param name="deprecated">A flag which indicates if the decorated parameter will be marked as deprecated in Swagger document</param>
        </member>
        <member name="T:SignalRSwaggerGen.Attributes.SignalRReturnAttribute">
            <summary>
            Use this attribute to enable Swagger documentation for method return type
            </summary>
        </member>
        <member name="M:SignalRSwaggerGen.Attributes.SignalRReturnAttribute.#ctor(System.Type,System.Int32,System.String)">
            <param name="returnType">Return type. If null specified, the return type of the method will be picked up.</param>
            <param name="statusCode">The text that will appear in status code section of the corresponding response in Swagger document</param>
            <param name="description">The text that will appear in description section of the corresponding response in Swagger document</param>
        </member>
        <member name="T:SignalRSwaggerGen.Enums.AutoDiscover">
            <summary>
            A flag indicating what components will have Swagger documentation enabled automatically
            </summary>
        </member>
        <member name="F:SignalRSwaggerGen.Enums.AutoDiscover.Inherit">
            <summary>
            Inherit value from higher level configurations
            </summary>
        </member>
        <member name="F:SignalRSwaggerGen.Enums.AutoDiscover.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SignalRSwaggerGen.Enums.AutoDiscover.Methods">
            <summary>
            Public non-static methods
            </summary>
        </member>
        <member name="F:SignalRSwaggerGen.Enums.AutoDiscover.Params">
            <summary>
            Method params
            </summary>
        </member>
        <member name="F:SignalRSwaggerGen.Enums.AutoDiscover.MethodsAndParams">
            <summary>
            Public non-static methods and their params
            </summary>
        </member>
        <member name="T:SignalRSwaggerGen.Enums.Operation">
            <summary>
            Same as HTTP verb
            </summary>
        </member>
        <member name="F:SignalRSwaggerGen.Enums.Operation.Inherit">
            <summary>
            Inherit value from higher level configurations
            </summary>
        </member>
        <member name="T:SignalRSwaggerGen.Naming.NameTransformer">
            <summary>
            Inherit from this class in order to create a name transformer
            </summary>
        </member>
        <member name="M:SignalRSwaggerGen.Naming.NameTransformer.Transform(System.String)">
            <summary>
            Name transformation function
            </summary>
            <param name="name">The name to transform</param>
            <returns>Transformed name</returns>
        </member>
        <member name="M:SignalRSwaggerGen.Naming.ToCamelTransformer.Transform(System.String)">
            <summary>
            Transforms the name to camel case
            </summary>
            <param name="name">The name to transform</param>
            <returns>Camel case name</returns>
        </member>
        <member name="M:SignalRSwaggerGen.Naming.ToLowerTransformer.Transform(System.String)">
            <summary>
            Transforms the name to lower case
            </summary>
            <param name="name">The name to transform</param>
            <returns>Lower case name</returns>
        </member>
        <member name="M:SignalRSwaggerGen.Naming.ToUpperTransformer.Transform(System.String)">
            <summary>
            Transforms the name to upper case
            </summary>
            <param name="name">The name to transform</param>
            <returns>Upper case name</returns>
        </member>
        <member name="T:SignalRSwaggerGen.SignalRSwaggerGenOptions">
            <summary>
            Options used by SignalRSwaggerGen to generate documentation for SignalR hubs
            </summary>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.HubPathFunc">
            <summary>
            The func that will get the hub name and return the path for the hub. The func will be skipped for the hubs that have a not null path specified for them in particular.
            If the func not specified explicitly, the default func will return a value based on the template <see cref="F:SignalRSwaggerGen.Constants.DefaultHubPathTemplate"/>.
            If you decide to set a custom func, make sure the func will return a different path for each hub.
            </summary>
            <example>hubName => $"hubs/are/here/{hubName}"</example>
            <exception cref="T:System.ArgumentNullException">Thrown if the value is null</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.AutoDiscover">
            <summary>
            A flag indicating what components will have Swagger documentation enabled automatically.
            Can be overridden for a specific component by specifying auto-discover value for that component in particular.
            If not specified explicitly, the default value is <see cref="F:SignalRSwaggerGen.Constants.DefaultAutoDiscover"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the value is <see cref="F:SignalRSwaggerGen.Enums.AutoDiscover.Inherit"/>, since there's no other higher level configuration to inherit from</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.Operation">
            <summary>
            Same as HTTP verb. Can be overridden for a specific method by specifying the operation for that method in particular.
            If not specified explicitly, the default value is <see cref="F:SignalRSwaggerGen.Constants.DefaultOperation"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the value is <see cref="F:SignalRSwaggerGen.Enums.Operation.Inherit"/>, since there's no other higher level configuration to inherit from</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.NameTransformer">
            <summary>
            The name transformer that will be used to transform the name of the hubs and their methods.
            Can be overridden for a specific component by specifying a transformer for that component in particular.
            If not specified at any level, no transformation will happen. The namespace <see cref="!:SignalRSwaggerGen.Naming"/> already contains some predefined name transformers, so check 'em out.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the value is null</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseHubXmlCommentsSummaryAsTag">
            <summary>
            Use summary section from hub's XML comments as tag for Swagger doc
            </summary>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseHubXmlCommentsSummaryAsTagDescription">
            <summary>
            Use summary section from hub's XML comments as tag description for Swagger doc. Default is true.
            </summary>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.ScanAssembly(System.Reflection.Assembly)">
            <summary>
            Specify the assembly to be scanned for SignalR hubs. If no assemblies specified explicitly, the entry assembly will be scanned by default.
            This method has additive effect. You can use it multiple times to add more assemblies.
            </summary>
            <param name="assembly">Assembly to be scanned for SignalR hubs</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="assembly"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.ScanAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Specify assemblies to be scanned for SignalR hubs. If no assemblies specified explicitly, the entry assembly will be scanned by default.
            This method has additive effect. You can use it multiple times to add more assemblies.
            </summary>
            <param name="assemblies">Assemblies to be scanned for SignalR hubs</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="assemblies"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="assemblies"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.ScanAssemblies(System.Reflection.Assembly[])">
            <summary>
            Specify assemblies to be scanned for SignalR hubs. If no assemblies specified explicitly, the entry assembly will be scanned by default.
            This method has additive effect. You can use it multiple times to add more assemblies.
            </summary>
            <param name="assemblies">Assemblies to be scanned for SignalR hubs</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="assemblies"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="assemblies"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisplayInDocument(System.String)">
            <summary>
            Specify the name of the Swagger document the hubs will be displayed in.
            Can be overridden for a specific hub by specifying document names for that hub in particular.
            If no document names specified explicitly, then the hubs will be displayed in all documents.
            This method has additive effect. You can use it multiple times to add more document names.
            </summary>
            <param name="documentName">Name of the Swagger document the hubs will be displayed in</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="documentName"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisplayInDocuments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Specify the list of names of the Swagger documents the hubs will be displayed in.
            Can be overridden for a specific hub by specifying document names for that hub in particular.
            If no document names specified explicitly, then the hubs will be displayed in all documents.
            This method has additive effect. You can use it multiple times to add more document names.
            </summary>
            <param name="documentNames">Names of the Swagger documents the hubs will be displayed in</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="documentNames"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="documentNames"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisplayInDocuments(System.String[])">
            <summary>
            Specify the list of names of the Swagger documents the hubs will be displayed in.
            Can be overridden for a specific hub by specifying document names for that hub in particular.
            If no document names specified explicitly, then the hubs will be displayed in all documents.
            This method has additive effect. You can use it multiple times to add more document names.
            </summary>
            <param name="documentNames">Names of the Swagger documents the hubs will be displayed in</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="documentNames"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="documentNames"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseXmlComments(System.String)">
            <summary>
            Specify an XML comments file to be used for generating Swagger doc.
            This method has additive effect. You can use it multiple times to add more XML comments files.
            </summary>
            <param name="path">Path to the file that contains XML comments</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="path"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="path"/> does not exist</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseXmlComments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Specify a list of XML comments files to be used for generating Swagger doc.
            This method has additive effect. You can use it multiple times to add more XML comments files.
            </summary>
            <param name="paths">Paths to the files that contain XML comments</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="paths"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="paths"/> is empty or any of its items does not exist</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseXmlComments(System.String[])">
            <summary>
            Specify a list of XML comments files to be used for generating Swagger doc.
            This method has additive effect. You can use it multiple times to add more XML comments files.
            </summary>
            <param name="paths">Paths to the files that contain XML comments</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="paths"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="paths"/> is empty or any of its items does not exist</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddSecurityRequirement(Microsoft.OpenApi.Models.OpenApiSecurityRequirement)">
            <summary>
            Specify a security requirement to be applied for all hubs.
            Can be overridden for a specific hub/method using <see cref="T:Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute"/> or <see cref="P:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.AuthenticationSchemes"/>.
            This method has additive effect. You can use it multiple times to add more security requirements.
            </summary>
            <param name="securityRequirement">Security requirement</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="securityRequirement"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddSecurityRequirements(System.Collections.Generic.IEnumerable{Microsoft.OpenApi.Models.OpenApiSecurityRequirement})">
            <summary>
            Specify a list of security requirements to be applied for all hubs.
            Can be overridden for a specific hub/method using <see cref="T:Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute"/> or <see cref="P:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.AuthenticationSchemes"/>.
            This method has additive effect. You can use it multiple times to add more security requirements.
            </summary>
            <param name="securityRequirements">Security requirements</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="securityRequirements"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="securityRequirements"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddSecurityRequirements(Microsoft.OpenApi.Models.OpenApiSecurityRequirement[])">
            <summary>
            Specify a list of security requirements to be applied for all hubs.
            Can be overridden for a specific hub/method using <see cref="T:Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute"/> or <see cref="P:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.AuthenticationSchemes"/>.
            This method has additive effect. You can use it multiple times to add more security requirements.
            </summary>
            <param name="securityRequirements">Security requirements</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="securityRequirements"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="securityRequirements"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddOperationFilter(Swashbuckle.AspNetCore.SwaggerGen.IOperationFilter)">
            <summary>
            Add an operation filter
            </summary>
            <param name="filter">Filter</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filter"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddParameterFilter(Swashbuckle.AspNetCore.SwaggerGen.IParameterFilter)">
            <summary>
            Add a parameter filter
            </summary>
            <param name="filter">Filter</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filter"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddRequestBodyFilter(Swashbuckle.AspNetCore.SwaggerGen.IRequestBodyFilter)">
            <summary>
            Add a request body filter
            </summary>
            <param name="filter">Filter</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filter"/> is null</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisregardOtherSecurityRequirements">
            <summary>
            Disregard security requirements not added via <see cref="T:SignalRSwaggerGen.SignalRSwaggerGenOptions"/>
            </summary>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisableSecurity">
            <summary>
            Disable security for all hubs
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions">
            <summary>
            Extensions for SwaggerGenOptions
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.AddSignalRSwaggerGen(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Add SignalRSwaggerGen to generate documentation for SignalR hubs
            </summary>
            <param name="swaggerGenOptions">...</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.AddSignalRSwaggerGen(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Action{SignalRSwaggerGen.SignalRSwaggerGenOptions})">
            <summary>
            Add SignalRSwaggerGen to generate documentation for SignalR hubs
            </summary>
            <param name="swaggerGenOptions">...</param>
            <param name="action">Action for setting up options for SignalRSwaggerGen</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is null</exception>
        </member>
    </members>
</doc>
