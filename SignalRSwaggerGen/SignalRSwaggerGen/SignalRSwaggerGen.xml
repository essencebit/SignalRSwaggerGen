<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SignalRSwaggerGen</name>
    </assembly>
    <members>
        <member name="T:SignalRSwaggerGen.SignalRSwaggerGenOptions">
            <summary>
            Options used by SignalRSwaggerGen to generate documentation for SignalR hubs
            </summary>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.HubPathFunc">
            <summary>
            The func that will get the hub name and return the path for the hub. The func will be skipped for the hubs that have a not null path specified for them in particular.
            If the func not specified explicitly, the default func will return a value based on the template <see cref="F:SignalRSwaggerGen.Constants.DefaultHubPathTemplate"/>.
            If you decide to set a custom func, make sure the func will return a different path for each hub.
            </summary>
            <example>hubName => $"hubs/are/here/{hubName}"</example>
            <exception cref="T:System.ArgumentNullException">Thrown if the value is null</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.AutoDiscover">
            <summary>
            A flag indicating what components will have Swagger documentation enabled automatically.
            Can be overridden for a specific component by specifying auto-discover value for that component in particular.
            If not specified explicitly, the default value is <see cref="F:SignalRSwaggerGen.Constants.DefaultAutoDiscover"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the value is <see cref="F:SignalRSwaggerGen.Enums.AutoDiscover.Inherit"/>, since there's no other higher level configuration to inherit from</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.Operation">
            <summary>
            Same as HTTP verb. Can be overridden for a specific method by specifying the operation for that method in particular.
            If not specified explicitly, the default value is <see cref="F:SignalRSwaggerGen.Constants.DefaultOperation"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the value is <see cref="F:SignalRSwaggerGen.Enums.Operation.Inherit"/>, since there's no other higher level configuration to inherit from</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.NameTransformer">
            <summary>
            The name transformer that will be used to transform the name of the hubs and their methods.
            Can be overridden for a specific component by specifying a transformer for that component in particular.
            If not specified at any level, no transformation will happen. The namespace <see cref="!:SignalRSwaggerGen.Naming"/> already contains some predefined name transformers, so check 'em out.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the value is null</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseHubXmlCommentsSummaryAsTag">
            <summary>
            Use summary section from hub's XML comments as tag for Swagger doc
            </summary>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseHubXmlCommentsSummaryAsTagDescription">
            <summary>
            Use summary section from hub's XML comments as tag description for Swagger doc. Default is true.
            </summary>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.ScanAssembly(System.Reflection.Assembly)">
            <summary>
            Specify the assembly to be scanned for SignalR hubs. If no assemblies specified explicitly, the entry assembly will be scanned by default.
            This method has additive effect. You can use it multiple times to add more assemblies.
            </summary>
            <param name="assembly">Assembly to be scanned for SignalR hubs</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="assembly"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.ScanAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Specify assemblies to be scanned for SignalR hubs. If no assemblies specified explicitly, the entry assembly will be scanned by default.
            This method has additive effect. You can use it multiple times to add more assemblies.
            </summary>
            <param name="assemblies">Assemblies to be scanned for SignalR hubs</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="assemblies"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="assemblies"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.ScanAssemblies(System.Reflection.Assembly[])">
            <summary>
            Specify assemblies to be scanned for SignalR hubs. If no assemblies specified explicitly, the entry assembly will be scanned by default.
            This method has additive effect. You can use it multiple times to add more assemblies.
            </summary>
            <param name="assemblies">Assemblies to be scanned for SignalR hubs</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="assemblies"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="assemblies"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisplayInDocument(System.String)">
            <summary>
            Specify the name of the Swagger document the hubs will be displayed in.
            Can be overridden for a specific hub by specifying document names for that hub in particular.
            If no document names specified explicitly, then the hubs will be displayed in all documents.
            This method has additive effect. You can use it multiple times to add more document names.
            </summary>
            <param name="documentName">Name of the Swagger document the hubs will be displayed in</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="documentName"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisplayInDocuments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Specify the list of names of the Swagger documents the hubs will be displayed in.
            Can be overridden for a specific hub by specifying document names for that hub in particular.
            If no document names specified explicitly, then the hubs will be displayed in all documents.
            This method has additive effect. You can use it multiple times to add more document names.
            </summary>
            <param name="documentNames">Names of the Swagger documents the hubs will be displayed in</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="documentNames"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="documentNames"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisplayInDocuments(System.String[])">
            <summary>
            Specify the list of names of the Swagger documents the hubs will be displayed in.
            Can be overridden for a specific hub by specifying document names for that hub in particular.
            If no document names specified explicitly, then the hubs will be displayed in all documents.
            This method has additive effect. You can use it multiple times to add more document names.
            </summary>
            <param name="documentNames">Names of the Swagger documents the hubs will be displayed in</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="documentNames"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="documentNames"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseXmlComments(System.String)">
            <summary>
            Specify an XML comments file to be used for generating Swagger doc.
            This method has additive effect. You can use it multiple times to add more XML comments files.
            </summary>
            <param name="path">Path to the file that contains XML comments</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="path"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="path"/> does not exist</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseXmlComments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Specify a list of XML comments files to be used for generating Swagger doc.
            This method has additive effect. You can use it multiple times to add more XML comments files.
            </summary>
            <param name="paths">Paths to the files that contain XML comments</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="paths"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="paths"/> is empty or any of its items does not exist</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.UseXmlComments(System.String[])">
            <summary>
            Specify a list of XML comments files to be used for generating Swagger doc.
            This method has additive effect. You can use it multiple times to add more XML comments files.
            </summary>
            <param name="paths">Paths to the files that contain XML comments</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="paths"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="paths"/> is empty or any of its items does not exist</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddSecurityRequirement(Microsoft.OpenApi.Models.OpenApiSecurityRequirement)">
            <summary>
            Specify a security requirement to be applied for all hubs.
            Can be overridden for a specific hub/method using <see cref="T:Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute"/> or <see cref="P:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.AuthenticationSchemes"/>.
            This method has additive effect. You can use it multiple times to add more security requirements.
            </summary>
            <param name="securityRequirement">Security requirement</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="securityRequirement"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddSecurityRequirements(System.Collections.Generic.IEnumerable{Microsoft.OpenApi.Models.OpenApiSecurityRequirement})">
            <summary>
            Specify a list of security requirements to be applied for all hubs.
            Can be overridden for a specific hub/method using <see cref="T:Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute"/> or <see cref="P:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.AuthenticationSchemes"/>.
            This method has additive effect. You can use it multiple times to add more security requirements.
            </summary>
            <param name="securityRequirements">Security requirements</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="securityRequirements"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="securityRequirements"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddSecurityRequirements(Microsoft.OpenApi.Models.OpenApiSecurityRequirement[])">
            <summary>
            Specify a list of security requirements to be applied for all hubs.
            Can be overridden for a specific hub/method using <see cref="T:Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute"/> or <see cref="P:Microsoft.AspNetCore.Authorization.AuthorizeAttribute.AuthenticationSchemes"/>.
            This method has additive effect. You can use it multiple times to add more security requirements.
            </summary>
            <param name="securityRequirements">Security requirements</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="securityRequirements"/> or any of its items is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="securityRequirements"/> is empty</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddOperationFilter(Swashbuckle.AspNetCore.SwaggerGen.IOperationFilter)">
            <summary>
            Add an operation filter
            </summary>
            <param name="filter">Filter</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filter"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddParameterFilter(Swashbuckle.AspNetCore.SwaggerGen.IParameterFilter)">
            <summary>
            Add a parameter filter
            </summary>
            <param name="filter">Filter</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filter"/> is null</exception>
        </member>
        <member name="M:SignalRSwaggerGen.SignalRSwaggerGenOptions.AddRequestBodyFilter(Swashbuckle.AspNetCore.SwaggerGen.IRequestBodyFilter)">
            <summary>
            Add a request body filter
            </summary>
            <param name="filter">Filter</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filter"/> is null</exception>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisregardOtherSecurityRequirements">
            <summary>
            Disregard security requirements not added via <see cref="T:SignalRSwaggerGen.SignalRSwaggerGenOptions"/>
            </summary>
        </member>
        <member name="P:SignalRSwaggerGen.SignalRSwaggerGenOptions.DisableSecurity">
            <summary>
            Disable security for all hubs
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions">
            <summary>
            Extensions for SwaggerGenOptions
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.AddSignalRSwaggerGen(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Add SignalRSwaggerGen to generate documentation for SignalR hubs
            </summary>
            <param name="swaggerGenOptions">...</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.AddSignalRSwaggerGen(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Action{SignalRSwaggerGen.SignalRSwaggerGenOptions})">
            <summary>
            Add SignalRSwaggerGen to generate documentation for SignalR hubs
            </summary>
            <param name="swaggerGenOptions">...</param>
            <param name="action">Action for setting up options for SignalRSwaggerGen</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is null</exception>
        </member>
    </members>
</doc>
